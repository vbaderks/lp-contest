/* LPCP Contest 2020 Problem : Shingoki
   https://github.com/alviano/lpcp-contest-2020/tree/master/problem-5
   by Neng-Fa Zhou, 2/2020
   requires the latest version of Picat to run.
*/

import util, sat.

main =>
    main(["sample.in"]).
    
main([File]) =>
    read_data(File,NR,NC,Board,Grid),
    hcp_grid(Grid,Es),   % new built-in in Picat version 3.1
    EMap = new_map(),
    foreach ({(R1,C1),(R2,C2),B} in Es)
        EMap.put({R1,C1,R2,C2}, B)
    end,
    foreach(R in 1..NR, C in 1..NC)
        if Board[R,C] = $w(Clue) then
            constrain_w(NR,NC,EMap,R,C,Clue)
        elseif Board[R,C] = $b(Clue) then
            constrain_b(NR,NC,EMap,R,C,Clue)
        end
    end,
    solve((Grid,values(EMap))),
    output(EMap).

read_data(File,NR,NC,Board,Grid) =>
    IS = open(File),
    Line1 = read_line(IS),
    [NR0,NC0,NW,NB] = [to_int(Token) : Token in split(Line1)],
    NR is NR0+1,
    NC is NC0+1,
    Board = new_array(NR,NC),
    Grid = new_array(NR,NC),
    foreach (I in 1..NW)
        Line = read_line(IS),
        [R0,C0,Clue] = [to_int(Token) : Token in split(Line)],
        Board[R0+1,C0+1] = $w(Clue),
        Grid[R0+1,C0+1] = 1
    end,
    foreach (I in 1..NB)
        Line = read_line(IS),
        [R0,C0,Clue] = [to_int(Token) : Token in split(Line)],
        Board[R0+1,C0+1] = $b(Clue),
        Grid[R0+1,C0+1] = 1        
    end,
    foreach (R in 1..NR, C in 1..NC)
        (var(Board[R,C]) -> Board[R,C] = empty; true)
    end,
    Grid :: 0..1,          % the cell (R,C) is in the circuit if Grid[R,C] = 1
    close(IS).

% White circles must be passed through in a straight line.
% The clue numbers in the circles show the sum of the lengths of the 2 straight lines going out of that circle. 
constrain_w(NR,NC,EMap,R,C,Clue) =>
    Ps = [],
    foreach (D1 in 1..Clue-1, D2 = Clue-D1)
        V = [(R1,C) : R1 in R-D1..R+D2],
        P1 = [(R-D1,C-1)] ++ V ++ [(R+D2,C-1)],
        P2 = [(R-D1,C-1)] ++ V ++ [(R+D2,C+1)],
        P3 = [(R-D1,C+1)] ++ V ++ [(R+D2,C-1)],
        P4 = [(R-D1,C+1)] ++ V ++ [(R+D2,C+1)],
        H = [(R,C1) : C1 in C-D1..C+D2],
        P5 = [(R-1,C-D1)] ++ H ++ [(R-1,C+D2)],
        P6 = [(R-1,C-D1)] ++ H ++ [(R+1,C+D2)],
        P7 = [(R+1,C-D1)] ++ H ++ [(R-1,C+D2)],
        P8 = [(R+1,C-D1)] ++ H ++ [(R+1,C+D2)],
        Ps := [P1,P2,P3,P4,P5,P6,P7,P8|Ps]
    end,
    constrain_paths(NR,NC,EMap,Ps,[]).

% Black circles must be turned upon.
% The clue numbers in the circles show the sum of the lengths of the 2 straight lines going out of that circle. 
constrain_b(NR,NC,EMap,R,C,Clue) =>
    Ps = [],
    foreach (D1 in 1..Clue-1, D2 = Clue-D1)
        L1 = [(R1,C) : R1 in R-D1..R] ++ [(R,C1) : C1 in C-1..-1..C-D2],
        P1 = [(R-D1,C-1)] ++ L1 ++ [(R-1,C-D2)],
        P2 = [(R-D1,C-1)] ++ L1 ++ [(R+1,C-D2)],
        P3 = [(R-D1,C+1)] ++ L1 ++ [(R-1,C-D2)],
        P4 = [(R-D1,C+1)] ++ L1 ++ [(R+1,C-D2)],
        L2 = [(R1,C) : R1 in R-D1..R] ++ [(R,C1) : C1 in C+1..C+D2],
        P5 = [(R-D1,C-1)] ++ L2 ++ [(R-1,C+D2)],
        P6 = [(R-D1,C-1)] ++ L2 ++ [(R+1,C+D2)],
        P7 = [(R-D1,C+1)] ++ L2 ++ [(R-1,C+D2)],
        P8 = [(R-D1,C+1)] ++ L2 ++ [(R+1,C+D2)],
        L3 = [(R,C1) : C1 in C+D1..-1..C] ++ [(R1,C) : R1 in (R+1)..R+D2],
        P9  = [(R-1,C+D1)] ++ L3 ++ [(R+D2,C-1)],
        P10  = [(R-1,C+D1)] ++ L3 ++ [(R+D2,C+1)],
        P11  = [(R+1,C+D1)] ++ L3 ++ [(R+D2,C-1)],
        P12  = [(R+1,C+D1)] ++ L3 ++ [(R+D2,C+1)],
        L4 = [(R,C1) : C1 in C-D1..C] ++ [(R1,C) : R1 in (R+1)..R+D2],
        P13  = [(R-1,C-D1)] ++ L4 ++ [(R+D2,C-1)],
        P14  = [(R-1,C-D1)] ++ L4 ++ [(R+D2,C+1)],
        P15  = [(R+1,C-D1)] ++ L4 ++ [(R+D2,C-1)],
        P16  = [(R+1,C-D1)] ++ L4 ++ [(R+D2,C+1)],
        Ps := [P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16|Ps]
    end,
    constrain_paths(NR,NC,EMap,Ps,[]).

constrain_paths(_NR,_NC,_EMap,[],Bs) =>
    sum(Bs) #>= 1.
constrain_paths(NR,NC,EMap,[P|Ps],Bs), all_coords_on_board(NR,NC,P) =>
    constrain_path(EMap,P,[],B1),
    RevP = reverse(P),
    constrain_path(EMap,RevP,[],B2),
    constrain_paths(NR,NC,EMap,Ps,[B1,B2|Bs]).
constrain_paths(NR,NC,EMap,[_|Ps],Bs) =>
    constrain_paths(NR,NC,EMap,Ps,Bs).

constrain_path(EMap,[(R,C),(R1,C1)|P],ConjBs,B) =>
    EdgeIn = EMap.get({R,C,R1,C1}),
    ConjBs1 = [EdgeIn|ConjBs],
    constrain_path(EMap,[(R1,C1)|P],ConjBs1,B).
constrain_path(_EMap,_,ConjBs,B) =>
    B #= min(ConjBs).

all_coords_on_board(NR,NC,P) =>
    foreach ((R,C) in P)
        R >= 1, R =< NR,
        C >= 1, C =< NC
    end.

output(EMap) =>
    InEdges = [Edge : ({R,C,R1,C1} = 1) in map_to_list(EMap), Edge = sort([(R,C),(R1,C1)])].sort(),
    HCount = 0,
    VCount = 0,
    foreach ([(R,C),(R1,C1)] in InEdges)
        (R == R1 ->
            HCount := HCount+1
        ;
            VCount := VCount+1
        )
    end,
    println(HCount),
    foreach ([(R,C),(R,C1)] in InEdges)
        printf("%w %w\n",R-1,C-1)
    end,
    println(VCount),
    foreach ([(R,C),(R1,C)] in InEdges)
        printf("%w %w\n",R-1,C-1)
    end.
